
Starting braid_TestInitAccess

   braid_TestInitAccess:   Starting Test 1
   braid_TestInitAccess:   u = init(t=0.00e+00)
   braid_TestInitAccess:   access(u) 
  my_Access() called, iter= 0, level= 0
   braid_TestInitAccess:   check output: wrote u for initial condition at t=0.00e+00. 

   braid_TestInitAccess:   free(u) 
Finished braid_TestInitAccess

Starting braid_TestInitAccess

   braid_TestInitAccess:   Starting Test 1
   braid_TestInitAccess:   u = init(t=5.78e-03)
   braid_TestInitAccess:   access(u) 
   braid_TestInitAccess:   check output: wrote u for initial condition at t=5.78e-03. 

   braid_TestInitAccess:   free(u) 
Finished braid_TestInitAccess

Starting braid_TestClone

   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=0.00e+00)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   access(u)
   braid_TestClone:   access(v)
   braid_TestClone:   check output:  wrote u and v for initial condition at t=0.00e+00.

   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone

Starting braid_TestClone

   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=5.78e-03)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   access(u)
   braid_TestClone:   access(v)
   braid_TestClone:   check output:  wrote u and v for initial condition at t=5.78e-03.

   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone

Starting braid_TestSum

   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=0.00e+00)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   access(v)
   braid_TestSum:   check output:  v should equal the zero vector

   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   access(v)
   braid_TestSum:   access(u)
   braid_TestSum:   check output:  v should equal 2*u 

   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum

Starting braid_TestSum

   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=5.78e-03)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   access(v)
   braid_TestSum:   check output:  v should equal the zero vector

   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   access(v)
   braid_TestSum:   access(u)
   braid_TestSum:   check output:  v should equal 2*u 

   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum

Starting braid_TestSpatialNorm

   braid_TestSpatialNorm:   Starting Test 1
   braid_TestSpatialNorm:   u = init(t=0.00e+00)
   braid_TestSpatialNorm:   spatialnorm(u) 
   braid_TestSpatialNorm:   v = clone(u)
   braid_TestSpatialNorm:   v = u - v 
   braid_TestSpatialNorm:   spatialnorm(v) 
   braid_TestSpatialNorm:   Test 1 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestSpatialNorm:   expected output:  spatialnorm(v) = 0.0 

   braid_TestSpatialNorm:   Starting Test 2
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = u + w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 2 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 1.60e+01 / 8.00e+00 = 2.00e+00 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 2.0 

   braid_TestSpatialNorm:   Starting Test 3
   braid_TestSpatialNorm:   free(w)
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = 0.0*u + 0.5*w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 3 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 4.00e+00 / 8.00e+00 = 5.00e-01 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 0.5 

   braid_TestSpatialNorm:   free(u)
   braid_TestSpatialNorm:   free(v)
   braid_TestSpatialNorm:   free(w)
Finished braid_TestSpatialNorm: all tests passed successfully

Starting braid_TestSpatialNorm

   braid_TestSpatialNorm:   Starting Test 1
   braid_TestSpatialNorm:   u = init(t=5.78e-03)
   braid_TestSpatialNorm:   spatialnorm(u) 
   braid_TestSpatialNorm:   v = clone(u)
   braid_TestSpatialNorm:   v = u - v 
   braid_TestSpatialNorm:   spatialnorm(v) 
   braid_TestSpatialNorm:   Test 1 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestSpatialNorm:   expected output:  spatialnorm(v) = 0.0 

   braid_TestSpatialNorm:   Starting Test 2
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = u + w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 2 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 2.03e+01 / 1.01e+01 = 2.00e+00 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 2.0 

   braid_TestSpatialNorm:   Starting Test 3
   braid_TestSpatialNorm:   free(w)
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = 0.0*u + 0.5*w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 3 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 5.07e+00 / 1.01e+01 = 5.00e-01 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 0.5 

   braid_TestSpatialNorm:   free(u)
   braid_TestSpatialNorm:   free(v)
   braid_TestSpatialNorm:   free(w)
Finished braid_TestSpatialNorm: all tests passed successfully

Starting braid_TestBuf

   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=0.00e+00)
   braid_TestBuf:   spatialnorm(u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   spatialnorm(v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestBuf:   expected output:  spatialnorm(v) = 0.0 

   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully

Starting braid_TestBuf

   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=5.78e-03)
   braid_TestBuf:   spatialnorm(u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   spatialnorm(v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestBuf:   expected output:  spatialnorm(v) = 0.0 

   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully

Starting braid_TestCoarsenRefine

   braid_TestCoarsenRefine:   Starting Test 1
   braid_TestCoarsenRefine:   u = init(t=0.00e+00)
   braid_TestCoarsenRefine:   spatialnorm(u) 
   braid_TestCoarsenRefine:   uc = coarsen(u)
   braid_TestCoarsenRefine:   access(uc) 
  my_Access() called, iter= 0, level= 1
   braid_TestCoarsenRefine:   access(u) 
  my_Access() called, iter= 0, level= 0
   braid_TestCoarsenRefine:   actual output:   wrote u and spatially coarsened u 

   braid_TestCoarsenRefine:   Starting Test 2
   braid_TestCoarsenRefine:   v = clone(u)
   braid_TestCoarsenRefine:   vc = coarsen(v)
   braid_TestCoarsenRefine:   wc = clone(vc)
   braid_TestCoarsenRefine:   wc = uc - wc 
   braid_TestCoarsenRefine:   spatialnorm(wc)
   braid_TestCoarsenRefine:   Test 2 Passed
   braid_TestCoarsenRefine:   actual output:    spatialnorm(wc) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  spatialnorm(wc) = 0.0 

   braid_TestCoarsenRefine:   Starting Test 3
   braid_TestCoarsenRefine:   w = clone(u)
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   v = refine(vc)
   braid_TestCoarsenRefine:   u = refine(uc)
   braid_TestCoarsenRefine:   v = u - v 
   braid_TestCoarsenRefine:   spatialnorm(v)
   braid_TestCoarsenRefine:   Test 3 Passed
   braid_TestCoarsenRefine:   actual output:    spatialnorm(v) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  spatialnorm(v) = 0.0 

   braid_TestCoarsenRefine:   Starting Test 4
   braid_TestCoarsenRefine:   w = w - u 
   braid_TestCoarsenRefine:   spatialnorm(w)
   braid_TestCoarsenRefine:   actual output:    spatialnorm(w) = 1.87e-01 
   braid_TestCoarsenRefine:   expected output:  For simple interpolation formulas
                             (e.g., bilinear) and a known function
                             (e.g., constant), spatialnorm(w) should = 0

   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   free(w)
   braid_TestCoarsenRefine:   free(uc)
   braid_TestCoarsenRefine:   free(vc)
   braid_TestCoarsenRefine:   free(wc)
Finished braid_TestCoarsenRefine: all tests passed successfully

Starting braid_TestCoarsenRefine

   braid_TestCoarsenRefine:   Starting Test 1
   braid_TestCoarsenRefine:   u = init(t=0.00e+00)
   braid_TestCoarsenRefine:   spatialnorm(u) 
   braid_TestCoarsenRefine:   uc = coarsen(u)
   braid_TestCoarsenRefine:   access(uc) 
  my_Access() called, iter= 0, level= 1
   braid_TestCoarsenRefine:   access(u) 
  my_Access() called, iter= 0, level= 0
   braid_TestCoarsenRefine:   actual output:   wrote u and spatially coarsened u 

   braid_TestCoarsenRefine:   Starting Test 2
   braid_TestCoarsenRefine:   v = clone(u)
   braid_TestCoarsenRefine:   vc = coarsen(v)
   braid_TestCoarsenRefine:   wc = clone(vc)
   braid_TestCoarsenRefine:   wc = uc - wc 
   braid_TestCoarsenRefine:   spatialnorm(wc)
   braid_TestCoarsenRefine:   Test 2 Passed
   braid_TestCoarsenRefine:   actual output:    spatialnorm(wc) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  spatialnorm(wc) = 0.0 

   braid_TestCoarsenRefine:   Starting Test 3
   braid_TestCoarsenRefine:   w = clone(u)
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   v = refine(vc)
   braid_TestCoarsenRefine:   u = refine(uc)
   braid_TestCoarsenRefine:   v = u - v 
   braid_TestCoarsenRefine:   spatialnorm(v)
   braid_TestCoarsenRefine:   Test 3 Passed
   braid_TestCoarsenRefine:   actual output:    spatialnorm(v) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  spatialnorm(v) = 0.0 

   braid_TestCoarsenRefine:   Starting Test 4
   braid_TestCoarsenRefine:   w = w - u 
   braid_TestCoarsenRefine:   spatialnorm(w)
   braid_TestCoarsenRefine:   actual output:    spatialnorm(w) = 4.98e-01 
   braid_TestCoarsenRefine:   expected output:  For simple interpolation formulas
                             (e.g., bilinear) and a known function
                             (e.g., constant), spatialnorm(w) should = 0

   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   free(w)
   braid_TestCoarsenRefine:   free(uc)
   braid_TestCoarsenRefine:   free(vc)
   braid_TestCoarsenRefine:   free(wc)
Finished braid_TestCoarsenRefine: all tests passed successfully
Passed: all tests passed
