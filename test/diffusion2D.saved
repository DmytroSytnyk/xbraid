# Begin Test 0

  time steps = 256
  number of levels     = 9
  iterations           = 9
spatial problem size       : 16 x 16

# Begin Test 1

  time steps = 256
  number of levels     = 9
  iterations           = 8
spatial problem size       : 16 x 16

# Begin Test 2

  my_Write() called, iter= 24, level= 0
  time steps = 128
  number of levels     = 8
  iterations           = 24
spatial problem size       : 33 x 33
  0   |  expl        9.82e-02    9.82e-02    1.45e-03    3.00e-01
  1   |  expl        1.96e-01    1.96e-01    2.89e-03    1.50e-01
  2   |  expl        1.96e-01    1.96e-01    5.78e-03    3.00e-01
  3   |  expl        3.93e-01    3.93e-01    1.16e-02    1.50e-01
  4   |  expl        3.93e-01    3.93e-01    2.31e-02    3.00e-01
  5   |  expl        7.85e-01    7.85e-01    4.63e-02    1.50e-01
  6   |  expl        7.85e-01    7.85e-01    9.25e-02    3.00e-01
  7   |  expl        1.57e+00    1.57e+00    1.85e-01    1.50e-01

# Begin Test 3

  my_Write() called, iter= 7, level= 0
  time steps = 32
  number of levels     = 6
  iterations           = 7
spatial problem size       : 17 x 17

# Begin Test 4

  my_Write() called, iter= 0, level= 0
  my_Write() called, iter= 1, level= 4
  my_Write() called, iter= 1, level= 3
  my_Write() called, iter= 1, level= 2
  my_Write() called, iter= 1, level= 1
  my_Write() called, iter= 1, level= 0
  my_Write() called, iter= 2, level= 4
  my_Write() called, iter= 2, level= 3
  my_Write() called, iter= 2, level= 2
  my_Write() called, iter= 2, level= 1
  my_Write() called, iter= 2, level= 0
  my_Write() called, iter= 3, level= 4
  my_Write() called, iter= 3, level= 3
  my_Write() called, iter= 3, level= 2
  my_Write() called, iter= 3, level= 1
  my_Write() called, iter= 3, level= 0
  my_Write() called, iter= 4, level= 4
  my_Write() called, iter= 4, level= 3
  my_Write() called, iter= 4, level= 2
  my_Write() called, iter= 4, level= 1
  my_Write() called, iter= 4, level= 0
  my_Write() called, iter= 5, level= 4
  my_Write() called, iter= 5, level= 3
  my_Write() called, iter= 5, level= 2
  my_Write() called, iter= 5, level= 1
  my_Write() called, iter= 5, level= 0
  my_Write() called, iter= 6, level= 4
  my_Write() called, iter= 6, level= 3
  my_Write() called, iter= 6, level= 2
  my_Write() called, iter= 6, level= 1
  my_Write() called, iter= 6, level= 0
  my_Write() called, iter= 7, level= 4
  my_Write() called, iter= 7, level= 3
  my_Write() called, iter= 7, level= 2
  my_Write() called, iter= 7, level= 1
  my_Write() called, iter= 7, level= 0
  time steps = 32
  number of levels     = 6
  iterations           = 7
spatial problem size       : 17 x 17

# Begin Test 5

  my_Write() called, iter= 7, level= 0
spatial problem size       : 17 x 17

# Begin Test 6
 
  my_Write() called, iter= 7, level= 0
  time steps = 32
  number of levels     = 6
  iterations           = 7
spatial problem size       : 17 x 17

# Begin Test 7
 
  my_Write() called, iter= 7, level= 0
  time steps = 32
  number of levels     = 6
  iterations           = 7
spatial problem size       : 17 x 17

# Begin Test 8

Starting braid_TestInitWrite
   braid_TestInitWrite:   Starting Test 1
   braid_TestInitWrite:   u = init(t=0.00e+00)
   braid_TestInitWrite:   write(u) 
  my_Write() called, iter= 0, level= 0
   braid_TestInitWrite:   check output: wrote u for initial condition at t=0.00e+00. 
   braid_TestInitWrite:   free(u) 
Finished braid_TestInitWrite
Starting braid_TestInitWrite
   braid_TestInitWrite:   Starting Test 1
   braid_TestInitWrite:   u = init(t=5.78e-03)
   braid_TestInitWrite:   write(u) 
   braid_TestInitWrite:   check output: wrote u for initial condition at t=5.78e-03. 
   braid_TestInitWrite:   free(u) 
Finished braid_TestInitWrite
Starting braid_TestClone
   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=0.00e+00)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   write(u)
   braid_TestClone:   write(v)
   braid_TestClone:   check output:  wrote u and v for initial condition at t=0.00e+00.
   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone
Starting braid_TestClone
   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=5.78e-03)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   write(u)
   braid_TestClone:   write(v)
   braid_TestClone:   check output:  wrote u and v for initial condition at t=5.78e-03.
   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone
Starting braid_TestSum
   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=0.00e+00)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   write(v)
   braid_TestSum:   check output:  v should equal the zero vector
   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   write(v)
   braid_TestSum:   write(u)
   braid_TestSum:   check output:  v should equal 2*u 
   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum
Starting braid_TestSum
   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=5.78e-03)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   write(v)
   braid_TestSum:   check output:  v should equal the zero vector
   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   write(v)
   braid_TestSum:   write(u)
   braid_TestSum:   check output:  v should equal 2*u 
   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum
Starting braid_TestDot
   braid_TestDot:   Starting Test 1
   braid_TestDot:   u = init(t=0.00e+00)
   braid_TestDot:   dot(u,u) 
   braid_TestDot:   v = clone(u)
   braid_TestDot:   v = u - v 
   braid_TestDot:   dot(v,v) 
   braid_TestDot:   Test 1 Passed
   braid_TestDot:   actual output:    dot(v,v) = 0.00e+00  
   braid_TestDot:   expected output:  dot(v,v) = 0.0 
   braid_TestDot:   Starting Test 2
   braid_TestDot:   w = clone(u)
   braid_TestDot:   w = u + w 
   braid_TestDot:   dot(u,u)
   braid_TestDot:   dot(w,w)
   braid_TestDot:   Test 2 Passed
   braid_TestDot:   actual output:    dot(w,w) / dot(u,u) = 2.56e+02 / 6.40e+01 = 4.00e+00 
   braid_TestDot:   expected output:  dot(w,w) / dot(u,u) = 4.0 
   braid_TestDot:   Starting Test 3
   braid_TestDot:   free(w)
   braid_TestDot:   w = clone(u)
   braid_TestDot:   w = 0.0*u + 0.5*w 
   braid_TestDot:   dot(u,u)
   braid_TestDot:   dot(w,w)
   braid_TestDot:   Test 3 Passed
   braid_TestDot:   actual output:    dot(w,w) / dot(u,u) = 1.60e+01 / 6.40e+01 = 2.50e-01 
   braid_TestDot:   expected output:  dot(w,w) / dot(u,u) = 0.25 
   braid_TestDot:   Starting Test 4
   braid_TestDot:   free(w)
   braid_TestDot:   w = clone(u)
   braid_TestDot:   w = u + 0.5*w 
   braid_TestDot:   dot(u,u)
   braid_TestDot:   dot(w,u)
   braid_TestDot:   actual output:    dot(w,u) + dot(u,u) = 9.60e+01 + 6.40e+01 = 1.60e+02
   braid_TestDot:   v = u + w 
   braid_TestDot:   dot(v,u)
   braid_TestDot:   Test 4 Passed
   braid_TestDot:   actual output:    dot(v,u) = 1.60e+02  
   braid_TestDot:   expected output:  dot(v,u) = dot(w,u) + dot(u,u) 
   braid_TestDot:   free(u)
   braid_TestDot:   free(v)
   braid_TestDot:   free(w)
Finished braid_TestDot: all tests passed successfully
Starting braid_TestDot
   braid_TestDot:   Starting Test 1
   braid_TestDot:   u = init(t=5.78e-03)
   braid_TestDot:   dot(u,u) 
   braid_TestDot:   v = clone(u)
   braid_TestDot:   v = u - v 
   braid_TestDot:   dot(v,v) 
   braid_TestDot:   Test 1 Passed
   braid_TestDot:   actual output:    dot(v,v) = 0.00e+00  
   braid_TestDot:   expected output:  dot(v,v) = 0.0 
   braid_TestDot:   Starting Test 2
   braid_TestDot:   w = clone(u)
   braid_TestDot:   w = u + w 
   braid_TestDot:   dot(u,u)
   braid_TestDot:   dot(w,w)
   braid_TestDot:   Test 2 Passed
   braid_TestDot:   actual output:    dot(w,w) / dot(u,u) = 3.90e+02 / 9.75e+01 = 4.00e+00 
   braid_TestDot:   expected output:  dot(w,w) / dot(u,u) = 4.0 
   braid_TestDot:   Starting Test 3
   braid_TestDot:   free(w)
   braid_TestDot:   w = clone(u)
   braid_TestDot:   w = 0.0*u + 0.5*w 
   braid_TestDot:   dot(u,u)
   braid_TestDot:   dot(w,w)
   braid_TestDot:   Test 3 Passed
   braid_TestDot:   actual output:    dot(w,w) / dot(u,u) = 2.44e+01 / 9.75e+01 = 2.50e-01 
   braid_TestDot:   expected output:  dot(w,w) / dot(u,u) = 0.25 
   braid_TestDot:   Starting Test 4
   braid_TestDot:   free(w)
   braid_TestDot:   w = clone(u)
   braid_TestDot:   w = u + 0.5*w 
   braid_TestDot:   dot(u,u)
   braid_TestDot:   dot(w,u)
   braid_TestDot:   actual output:    dot(w,u) + dot(u,u) = 1.46e+02 + 9.75e+01 = 2.44e+02
   braid_TestDot:   v = u + w 
   braid_TestDot:   dot(v,u)
   braid_TestDot:   Test 4 Passed
   braid_TestDot:   actual output:    dot(v,u) = 2.44e+02  
   braid_TestDot:   expected output:  dot(v,u) = dot(w,u) + dot(u,u) 
   braid_TestDot:   free(u)
   braid_TestDot:   free(v)
   braid_TestDot:   free(w)
Finished braid_TestDot: all tests passed successfully
Starting braid_TestBuf
   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=0.00e+00)
   braid_TestBuf:   dot(u,u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   dot(v,v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    dot(v,v) = 0.00e+00  
   braid_TestBuf:   expected output:  dot(v,v) = 0.0 
   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully
Starting braid_TestBuf
   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=5.78e-03)
   braid_TestBuf:   dot(u,u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   dot(v,v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    dot(v,v) = 0.00e+00  
   braid_TestBuf:   expected output:  dot(v,v) = 0.0 
   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully
Starting braid_TestCoarsenRefine
   braid_TestCoarsenRefine:   Starting Test 1
   braid_TestCoarsenRefine:   u = init(t=0.00e+00)
   braid_TestCoarsenRefine:   dot(u,u) 
   braid_TestCoarsenRefine:   uc = coarsen(u)
   braid_TestCoarsenRefine:   write(uc) 
  my_Write() called, iter= 0, level= 1
   braid_TestCoarsenRefine:   write(u) 
  my_Write() called, iter= 0, level= 0
   braid_TestCoarsenRefine:   actual output:   wrote u and spatially coarsened u 
   braid_TestCoarsenRefine:   Starting Test 2
   braid_TestCoarsenRefine:   v = clone(u)
   braid_TestCoarsenRefine:   vc = coarsen(v)
   braid_TestCoarsenRefine:   wc = clone(vc)
   braid_TestCoarsenRefine:   wc = uc - wc 
   braid_TestCoarsenRefine:   dot(wc,wc)
   braid_TestCoarsenRefine:   Test 2 Passed
   braid_TestCoarsenRefine:   actual output:    dot(wc,wc) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  dot(wc,wc) = 0.0 
   braid_TestCoarsenRefine:   Starting Test 3
   braid_TestCoarsenRefine:   w = clone(u)
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   v = refine(vc)
   braid_TestCoarsenRefine:   u = refine(uc)
   braid_TestCoarsenRefine:   v = u - v 
   braid_TestCoarsenRefine:   dot(v,v)
   braid_TestCoarsenRefine:   Test 3 Passed
   braid_TestCoarsenRefine:   actual output:    dot(v,v) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  dot(v,v) = 0.0 
   braid_TestCoarsenRefine:   Starting Test 4
   braid_TestCoarsenRefine:   w = w - u 
   braid_TestCoarsenRefine:   dot(w,w)
   braid_TestCoarsenRefine:   actual output:    dot(w,w) = 3.50e-02 
   braid_TestCoarsenRefine:   expected output:  For simple interpolation formulas
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   free(w)
   braid_TestCoarsenRefine:   free(uc)
   braid_TestCoarsenRefine:   free(vc)
   braid_TestCoarsenRefine:   free(wc)
Finished braid_TestCoarsenRefine: all tests passed successfully
Starting braid_TestCoarsenRefine
   braid_TestCoarsenRefine:   Starting Test 1
   braid_TestCoarsenRefine:   u = init(t=0.00e+00)
   braid_TestCoarsenRefine:   dot(u,u) 
   braid_TestCoarsenRefine:   uc = coarsen(u)
   braid_TestCoarsenRefine:   write(uc) 
  my_Write() called, iter= 0, level= 1
   braid_TestCoarsenRefine:   write(u) 
  my_Write() called, iter= 0, level= 0
   braid_TestCoarsenRefine:   actual output:   wrote u and spatially coarsened u 
   braid_TestCoarsenRefine:   Starting Test 2
   braid_TestCoarsenRefine:   v = clone(u)
   braid_TestCoarsenRefine:   vc = coarsen(v)
   braid_TestCoarsenRefine:   wc = clone(vc)
   braid_TestCoarsenRefine:   wc = uc - wc 
   braid_TestCoarsenRefine:   dot(wc,wc)
   braid_TestCoarsenRefine:   Test 2 Passed
   braid_TestCoarsenRefine:   actual output:    dot(wc,wc) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  dot(wc,wc) = 0.0 
   braid_TestCoarsenRefine:   Starting Test 3
   braid_TestCoarsenRefine:   w = clone(u)
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   v = refine(vc)
   braid_TestCoarsenRefine:   u = refine(uc)
   braid_TestCoarsenRefine:   v = u - v 
   braid_TestCoarsenRefine:   dot(v,v)
   braid_TestCoarsenRefine:   Test 3 Passed
   braid_TestCoarsenRefine:   actual output:    dot(v,v) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  dot(v,v) = 0.0 
   braid_TestCoarsenRefine:   Starting Test 4
   braid_TestCoarsenRefine:   w = w - u 
   braid_TestCoarsenRefine:   dot(w,w)
   braid_TestCoarsenRefine:   actual output:    dot(w,w) = 1.81e-01 
   braid_TestCoarsenRefine:   expected output:  For simple interpolation formulas
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   free(w)
   braid_TestCoarsenRefine:   free(uc)
   braid_TestCoarsenRefine:   free(vc)
   braid_TestCoarsenRefine:   free(wc)
Finished braid_TestCoarsenRefine: all tests passed successfully

# Begin Test 9

  my_Write() called, iter= 0, level= 0
  time steps = 128
  number of levels     = 1
  iterations           = 0
spatial problem size       : 17 x 17

# Begin Test 10

  my_Write() called, iter= 7, level= 0
  time steps = 128
  number of levels     = 2
  iterations           = 7
spatial problem size       : 17 x 17

# Begin Test 11

  my_Write() called, iter= 8, level= 0
  time steps = 128
  number of levels     = 8
  iterations           = 8
spatial problem size       : 17 x 17

# Begin Test 12

  my_Write() called, iter= 8, level= 0
  time steps = 128
  number of levels     = 2
  iterations           = 8
spatial problem size       : 17 x 17


